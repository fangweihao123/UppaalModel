<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
	<declaration>// Place global declarations here.
clock x;
const int N = 5;
typedef int[0,N-1] class_id;
int matrix[N][N] = {{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,0,0,1}};
chan pick[N];
broadcast chan release;
int sum2()
{
    int i,j,sum1=0;
    for(i=0;i&lt;N;i++){
        for(j=0;j&lt;N;j++){
            if(matrix[i][j]==1){
                sum1++;
            }
        }
    }
    return sum1;
}
</declaration>
	<template>
		<name>Channel</name>
		<declaration>clock y;
int[0,2] len;
class_id list[2];

void communicate(){
    int c1 = list[0];
    int c2 = list[1];
    int i,temp;
    for(i=0;i&lt;N;i++){
        if(matrix[c1][i]==1||matrix[c2][i]==1){
            temp = 1;
        }else{
            temp = 0;
        }
        matrix[c1][i] = temp;
        matrix[c2][i] = temp;
    }
}

void enqueue(class_id c){
    len ++ ;
    list[len-1] = c;
}

void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

void dequeueAll(){
    int i;
    int tempLen = len;
    for(i=0;i&lt;tempLen;i++){
        len --;
        list[i] = 0;
    }
}

// Returns the front element of the queue
class_id front()
{
   return list[0];
}</declaration>
		<location id="id0" x="-216" y="-136">
			<name x="-226" y="-166">Occ</name>
			<label kind="invariant" x="-226" y="-121">y&lt;=1</label>
		</location>
		<location id="id1" x="-216" y="-344">
			<name x="-226" y="-374">Free</name>
			<committed/>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="24" y="-224">y&gt;=1</label>
			<label kind="synchronisation" x="24" y="-264">release!</label>
			<label kind="assignment" x="24" y="-248">dequeueAll()</label>
			<nail x="14" y="-133"/>
			<nail x="14" y="-349"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select" x="-304" y="-480">c : class_id</label>
			<label kind="guard" x="-302" y="-462">len&lt;2</label>
			<label kind="synchronisation" x="-302" y="-447">pick[c]!</label>
			<label kind="assignment" x="-302" y="-432">enqueue(c)</label>
			<nail x="-216" y="-432"/>
			<nail x="-320" y="-432"/>
			<nail x="-320" y="-344"/>
			<nail x="-264" y="-344"/>
			<nail x="-248" y="-344"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-208" y="-256">len == 2</label>
			<label kind="assignment" x="-216" y="-232">communicate(),y=0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Class</name>
		<parameter>const class_id id</parameter>
		<declaration>// Place local declarations here.
int locInfo[N];

void ini(class_id c_id)
{
    int i;
    for(i=0;i&lt;N;i++){
        if(i==c_id){
           locInfo[i] = 1;
        }else{
            locInfo[i] = 0;
        }
    }
}

void acquire(class_id c_id){
    int i;
    for(i=0;i&lt;N;i++){
        locInfo[i] = matrix[c_id][i];
    }
}
</declaration>
		<location id="id2" x="-280" y="-192">
			<name x="-290" y="-222">Communicating</name>
		</location>
		<location id="id3" x="-414" y="-306">
			<name x="-424" y="-336">Free</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-272" y="-304">release?</label>
			<label kind="assignment" x="-272" y="-288">acquire(id)</label>
			<nail x="-280" y="-304"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-400" y="-256">pick[id]?</label>
			<label kind="assignment" x="-400" y="-240">acquire(id)</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Channel,Class;</system>
</nta>
